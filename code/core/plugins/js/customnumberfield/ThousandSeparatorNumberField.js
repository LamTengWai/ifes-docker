/*
This file is ext for Ext JS 4.2

Develop by Nguyen Pham Chung
Mail: nguyenphamchung@gmail.compile

Build date: 2014-08-18 14:36:50
*/
Ext.define("ThousandSeparatorNumberField",{override:"Ext.form.field.Number",useThousandSeparator:false,toRawNumber:function(value){return String(value).replace(this.decimalSeparator,".").replace(new RegExp(Ext.util.Format.thousandSeparator,"g"),"")},getErrors:function(value){if(!this.useThousandSeparator){return this.callParent(arguments)}var me=this,errors=Ext.form.field.Text.prototype.getErrors.apply(me,arguments),format=Ext.String.format,num;value=Ext.isDefined(value)?value:this.processRawValue(this.getRawValue());if(value.length<1){return errors}value=me.toRawNumber(value);if(isNaN(value.replace(Ext.util.Format.thousandSeparator,""))){errors.push(format(me.nanText,value))}num=me.parseValue(value);if(me.minValue===0&&num<0){errors.push(this.negativeText)}else{if(num<me.minValue){errors.push(format(me.minText,me.minValue))}}if(num>me.maxValue){errors.push(format(me.maxText,me.maxValue))}return errors},valueToRaw:function(value){if(!this.useThousandSeparator){return this.callParent(arguments)}var me=this;var format="000,000";for(var i=0;i<me.decimalPrecision;i++){if(i==0){format+="."}format+="0"}value=me.parseValue(Ext.util.Format.number(value,format));value=me.fixPrecision(value);value=Ext.isNumber(value)?value:parseFloat(me.toRawNumber(value));value=isNaN(value)?"":String(Ext.util.Format.number(value,format)).replace(".",me.decimalSeparator);return value},getSubmitValue:function(){if(!this.useThousandSeparator){return this.callParent(arguments)}var me=this,value=me.callParent();if(!me.submitLocaleSeparator){value=me.toRawNumber(value)}return value},setMinValue:function(value){if(!this.useThousandSeparator){return this.callParent(arguments)}var me=this,allowed;me.minValue=Ext.Number.from(value,Number.NEGATIVE_INFINITY);me.toggleSpinners();if(me.disableKeyFilter!==true){allowed=me.baseChars+"";if(me.allowExponential){allowed+=me.decimalSeparator+"e+-"}else{allowed+=Ext.util.Format.thousandSeparator;if(me.allowDecimals){allowed+=me.decimalSeparator}if(me.minValue<0){allowed+="-"}}allowed=Ext.String.escapeRegex(allowed);me.maskRe=new RegExp("["+allowed+"]");if(me.autoStripChars){me.stripCharsRe=new RegExp("[^"+allowed+"]","gi")}}},parseValue:function(value){if(!this.useThousandSeparator){return this.callParent(arguments)}value=parseFloat(this.toRawNumber(value));return isNaN(value)?null:value}});